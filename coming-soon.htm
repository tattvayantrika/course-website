<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coming Soon - Tattva Yantrika</title>
    <link rel="icon" type="image/png" href="icon.png">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Segoe+UI:wght@400;600&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #0a0a0a;
            color: #ffffff;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            text-align: center;
        }

        #particle-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        .content-wrapper {
            position: relative;
            z-index: 2;
            padding: 2rem;
            background: rgba(10, 10, 30, 0.4);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            max-width: 800px;
            width: 90%;
            animation: fadeIn 1.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .logo-img {
            width: 70px;
            height: 70px;
            margin: 0 auto 1rem;
            animation: logoGlow 4s infinite alternate;
        }

        @keyframes logoGlow {
            from { filter: drop-shadow(0 0 5px rgba(255, 215, 0, 0.4)); }
            to { filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.8)); }
        }

        h1 {
            font-size: 2.5rem;
            font-weight: bold;
            background: linear-gradient(45deg, #FFD700, #FFA500, #FF8C00);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }

        p.subtitle {
            font-size: 1.2rem;
            color: #b8b8b8;
            margin-bottom: 0;
        }

        #countdown {
            display: none;
        }

        .countdown-item {
            display: none;
        }

        .countdown-item span {
            display: none;
        }

        .countdown-item div {
            display: none;
        }

        .notify-form {
            display: none;
        }

        .notify-form input {
            display: none;
        }

        .notify-form input::placeholder {
            display: none;
        }

        .notify-form input:focus {
            display: none;
        }

        .notify-btn {
            display: none;
        }

        .notify-btn:hover {
            display: none;
        }

        #form-message {
            display: none;
        }

        @media (max-width: 600px) {
            h1 { font-size: 2rem; }
            .subtitle { font-size: 1rem; }
            #countdown { flex-wrap: wrap; }
            .countdown-item { width: 45%; }
            .countdown-item span { font-size: 2rem; }
            .notify-form { flex-direction: column; }
        }
    </style>
</head>
<body>
    <canvas id="particle-canvas"></canvas>

    <div class="content-wrapper">
        <img src="TATTVA YANTRIKA-BG REMOVED.png" alt="Tattva Yantrika Logo" class="logo-img">
        <h1>A New Chapter Begins</h1>
        <p class="subtitle">We are preparing to launch something extraordinary. Stay tuned.</p>

    </div>

    <script>
        // --- Interactive Particle Background ---
        const canvas = document.getElementById('particle-canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let particlesArray;

        // get mouse position
        let mouse = {
            x: null,
            y: null,
            radius: (canvas.height / 100) * (canvas.width / 100)
        }

        window.addEventListener('mousemove', function(event) {
            mouse.x = event.x;
            mouse.y = event.y;
        });

        // create particle
        class Particle {
            constructor(x, y, directionX, directionY, size, color) {
                this.x = x;
                this.y = y;
                this.directionX = directionX;
                this.directionY = directionY;
                this.size = size;
                this.color = color;
            }
            // method to draw individual particle
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
                ctx.fillStyle = 'rgba(255, 215, 0, 0.6)';
                ctx.fill();
            }
            // check particle position, mouse position, move particle, draw particle
            update() {
                if (this.x > canvas.width || this.x < 0) {
                    this.directionX = -this.directionX;
                }
                if (this.y > canvas.height || this.y < 0) {
                    this.directionY = -this.directionY;
                }

                // check collision detection - mouse position / particle position
                let dx = mouse.x - this.x;
                let dy = mouse.y - this.y;
                let distance = Math.sqrt(dx * dx + dy * dy);
                if (distance < mouse.radius + this.size) {
                    if (mouse.x < this.x && this.x < canvas.width - this.size * 10) {
                        this.x += 5;
                    }
                    if (mouse.x > this.x && this.x > this.size * 10) {
                        this.x -= 5;
                    }
                    if (mouse.y < this.y && this.y < canvas.height - this.size * 10) {
                        this.y += 5;
                    }
                    if (mouse.y > this.y && this.y > this.size * 10) {
                        this.y -= 5;
                    }
                }
                // move particle
                this.x += this.directionX;
                this.y += this.directionY;
                // draw particle
                this.draw();
            }
        }

        // create particle array
        function init() {
            particlesArray = [];
            let numberOfParticles = (canvas.height * canvas.width) / 9000;
            for (let i = 0; i < numberOfParticles; i++) {
                let size = (Math.random() * 2) + 1;
                let x = (Math.random() * ((innerWidth - size * 2) - (size * 2)) + size * 2);
                let y = (Math.random() * ((innerHeight - size * 2) - (size * 2)) + size * 2);
                let directionX = (Math.random() * .4) - .2;
                let directionY = (Math.random() * .4) - .2;
                particlesArray.push(new Particle(x, y, directionX, directionY, size));
            }
        }

        // animation loop
        function animate() {
            requestAnimationFrame(animate);
            ctx.clearRect(0, 0, innerWidth, innerHeight);

            for (let i = 0; i < particlesArray.length; i++) {
                particlesArray[i].update();
            }
        }

        init();
        animate();

        window.addEventListener('resize', function() {
            canvas.width = innerWidth;
            canvas.height = innerHeight;
            mouse.radius = ((canvas.height / 100) * (canvas.height / 100));
            init();
        });

    </script>
</body>
</html>


